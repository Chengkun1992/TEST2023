from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
import numpy as np
from multiprocessing import Pool as tp
import time
import math


def comp_auc(fpr, tpr, drop_step):
    roc_auc = auc(fpr, tpr)
    # print(fpr, tpr, thresholds)
    print('auc = ', roc_auc)
    if drop_step:
        # ind = drop_samples(len(fpr), drop_step)
        # fpr_d = []
        # tpr_d = []
        # for id_ in ind:
        #     fpr_d.append(fpr[id_])
        #     tpr_d.append(tpr[id_])
        pass
    else:
        fpr_d = fpr
        tpr_d = tpr
    plt.figure()
    lw = 2
    print(type(fpr))
    plt.plot(fpr_d, tpr_d, color='darkorange',  # marker='s',
             lw=lw, label='LTR %0.4f' % roc_auc)
    # plt.plot(fpr, tpr, color='black',
    #          lw=lw, label='? %0.4f' % roc_auc)
    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic curve')
    plt.legend(loc="lower right")
    plt.show()
    # print('fpr:', fpr)
    # print('tpr:', tpr)
    return roc_auc


def test_():
    x = [50, 100, 150, 200, 250, 300, 350, 400]
    y_1 = [8.127, 5.040, 3.579, 2.681, 2.225, 1.684, 1.292, 1.196]
    y_2 = [11.166, 8.471, 7.882, 7.720, 7.655, 7.740, 7.792, 7.934]
    y_3 = [13.611, 10.856, 10.781, 10.965, 11.439, 11.967, 12.527, 12.798]

    y_1 = [3.258, 1.936, 1.299, 0.902, 0.695, 0.501, 0.374, 0.323]
    y_2 = [4.970, 4.000, 3.838, 3.816, 3.920, 3.871, 3.906, 3.963]
    y_3 = [9.778, 9.437, 9.450, 9.516, 9.670, 9.827, 9.982, 10.204]

    y_1 = [6.386, 3.826, 2.824, 2.071, 1.676, 1.301, 1.125, 0.883]
    y_2 = [9.319, 7.170, 6.725, 6.620, 6.612, 6.652, 6.724, 6.775]
    y_3 = [11.071, 9.059, 8.773, 9.072, 9.363, 9.736, 10.182, 10.471]

    TED_CA_fpr = [0., 0., 0., 0.0015748, 0.0015748, 0.00314961
        , 0.00314961, 0.00472441, 0.00472441, 0.00629921, 0.00629921, 0.00787402
        , 0.00787402, 0.00944882, 0.00944882, 0.01102362, 0.01102362, 0.01259843
        , 0.01259843, 0.01417323, 0.01417323, 0.01732283, 0.01732283, 0.02047244
        , 0.02047244, 0.02204724, 0.02204724, 0.02362205, 0.02362205, 0.02519685
        , 0.02519685, 0.02677165, 0.02677165, 0.02834646, 0.02834646, 0.03149606
        , 0.03149606, 0.03307087, 0.03307087, 0.03464567, 0.03464567, 0.03779528
        , 0.03779528, 0.03937008, 0.03937008, 0.04094488, 0.04094488, 0.04566929
        , 0.04566929, 0.04724409, 0.04724409, 0.0488189, 0.0488189, 0.0503937
        , 0.0503937, 0.0519685, 0.0519685, 0.06299213, 0.06299213, 0.06456693
        , 0.06456693, 0.06614173, 0.06614173, 0.06771654, 0.06771654, 0.06929134
        , 0.06929134, 0.07086614, 0.07086614, 0.07559055, 0.07559055, 0.08031496
        , 0.08031496, 0.08188976, 0.08188976, 0.08503937, 0.08503937, 0.09133858
        , 0.09133858, 0.09291339, 0.09291339, 0.1007874, 0.1007874, 0.10393701
        , 0.10393701, 0.10551181, 0.10551181, 0.10708661, 0.10708661, 0.10866142
        , 0.10866142, 0.11338583, 0.11338583, 0.11496063, 0.11496063, 0.11653543
        , 0.11653543, 0.11968504, 0.11968504, 0.12125984, 0.12125984, 0.12283465
        , 0.12283465, 0.12440945, 0.12440945, 0.12755906, 0.12755906, 0.12913386
        , 0.12913386, 0.13070866, 0.13070866, 0.13385827, 0.13385827, 0.13543307
        , 0.13543307, 0.13700787, 0.13700787, 0.14015748, 0.14015748, 0.14173228
        , 0.14173228, 0.14330709, 0.14330709, 0.14488189, 0.14488189, 0.14645669
        , 0.14645669, 0.1496063, 0.1496063, 0.15275591, 0.15275591, 0.15590551
        , 0.15590551, 0.15748031, 0.15748031, 0.15905512, 0.15905512, 0.16062992
        , 0.16062992, 0.16220472, 0.16220472, 0.16535433, 0.16535433, 0.17007874
        , 0.17007874, 0.17322835, 0.17322835, 0.17952756, 0.17952756, 0.18110236
        , 0.18110236, 0.18267717, 0.18267717, 0.18582677, 0.18582677, 0.18740157
        , 0.18740157, 0.18897638, 0.18897638, 0.19055118, 0.19055118, 0.19370079
        , 0.19370079, 0.19685039, 0.19685039, 0.2, 0.2, 0.20314961
        , 0.20314961, 0.20472441, 0.20472441, 0.20629921, 0.20629921, 0.20787402
        , 0.20787402, 0.20944882, 0.20944882, 0.21259843, 0.21259843, 0.21732283
        , 0.21732283, 0.21889764, 0.21889764, 0.22519685, 0.22519685, 0.22677165
        , 0.22677165, 0.22834646, 0.22834646, 0.23149606, 0.23149606, 0.24724409
        , 0.24724409, 0.2488189, 0.2488189, 0.2503937, 0.2503937, 0.2519685
        , 0.2519685, 0.25669291, 0.25669291, 0.25984252, 0.25984252, 0.26141732
        , 0.26141732, 0.26456693, 0.26456693, 0.26614173, 0.26614173, 0.27086614
        , 0.27086614, 0.27401575, 0.27401575, 0.27559055, 0.27559055, 0.27874016
        , 0.27874016, 0.28661417, 0.28661417, 0.28818898, 0.28818898, 0.28976378
        , 0.28976378, 0.2976378, 0.2976378, 0.3023622, 0.3023622, 0.30708661
        , 0.30708661, 0.31023622, 0.31023622, 0.31181102, 0.31181102, 0.31496063
        , 0.31496063, 0.32125984, 0.32125984, 0.32283465, 0.32283465, 0.32440945
        , 0.32440945, 0.32598425, 0.32598425, 0.32755906, 0.32755906, 0.32913386
        , 0.32913386, 0.33070866, 0.33070866, 0.33543307, 0.33543307, 0.33700787
        , 0.33700787, 0.34173228, 0.34173228, 0.34330709, 0.34330709, 0.34645669
        , 0.34645669, 0.35748031, 0.35748031, 0.36220472, 0.36220472, 0.36377953
        , 0.36377953, 0.36535433, 0.36535433, 0.37007874, 0.37007874, 0.37322835
        , 0.37322835, 0.37480315, 0.37480315, 0.37637795, 0.37637795, 0.37795276
        , 0.37795276, 0.37952756, 0.37952756, 0.38425197, 0.38425197, 0.38582677
        , 0.38582677, 0.38740157, 0.38740157, 0.39055118, 0.39055118, 0.39370079
        , 0.39370079, 0.39685039, 0.39685039, 0.4015748, 0.4015748, 0.40472441
        , 0.40472441, 0.40629921, 0.40629921, 0.40787402, 0.40787402, 0.41102362
        , 0.41102362, 0.41259843, 0.41259843, 0.41417323, 0.41417323, 0.41574803
        , 0.41574803, 0.41732283, 0.41732283, 0.42677165, 0.42677165, 0.42834646
        , 0.42834646, 0.43149606, 0.43149606, 0.43464567, 0.43464567, 0.43622047
        , 0.43622047, 0.43937008, 0.43937008, 0.44094488, 0.44094488, 0.44566929
        , 0.44566929, 0.45511811, 0.45511811, 0.45984252, 0.45984252, 0.46141732
        , 0.46141732, 0.46929134, 0.46929134, 0.47244094, 0.47244094, 0.47874016
        , 0.47874016, 0.48031496, 0.48031496, 0.48188976, 0.48188976, 0.48503937
        , 0.48503937, 0.48818898, 0.48818898, 0.48976378, 0.48976378, 0.49606299
        , 0.49606299, 0.4992126, 0.4992126, 0.5023622, 0.5023622, 0.50708661
        , 0.50708661, 0.52283465, 0.52283465, 0.52598425, 0.52598425, 0.53700787
        , 0.53700787, 0.54488189, 0.54488189, 0.5480315, 0.5480315, 0.5511811
        , 0.5511811, 0.56062992, 0.56062992, 0.56377953, 0.56377953, 0.56535433
        , 0.56535433, 0.57322835, 0.57322835, 0.58267717, 0.58267717, 0.58425197
        , 0.58425197, 0.58740157, 0.58740157, 0.59055118, 0.59055118, 0.59370079
        , 0.59370079, 0.59527559, 0.59527559, 0.60629921, 0.60629921, 0.60787402
        , 0.60787402, 0.60944882, 0.60944882, 0.61732283, 0.61732283, 0.61889764
        , 0.61889764, 0.62362205, 0.62362205, 0.63149606, 0.63149606, 0.63937008
        , 0.63937008, 0.6519685, 0.6519685, 0.65354331, 0.65354331, 0.65511811
        , 0.65511811, 0.65984252, 0.65984252, 0.66614173, 0.66614173, 0.67086614
        , 0.67086614, 0.67874016, 0.67874016, 0.68031496, 0.68031496, 0.68503937
        , 0.68503937, 0.68661417, 0.68661417, 0.68976378, 0.68976378, 0.6992126
        , 0.6992126, 0.7007874, 0.7007874, 0.7023622, 0.7023622, 0.70551181
        , 0.70551181, 0.70866142, 0.70866142, 0.71496063, 0.71496063, 0.71811024
        , 0.71811024, 0.72598425, 0.72598425, 0.72913386, 0.72913386, 0.73858268
        , 0.73858268, 0.7496063, 0.7496063, 0.75275591, 0.75275591, 0.75433071
        , 0.75433071, 0.76062992, 0.76062992, 0.76377953, 0.76377953, 0.76850394
        , 0.76850394, 0.77322835, 0.77322835, 0.77480315, 0.77480315, 0.77637795
        , 0.77637795, 0.78425197, 0.78425197, 0.78582677, 0.78582677, 0.78740157
        , 0.78740157, 0.79370079, 0.79370079, 0.7984252, 0.7984252, 0.82992126
        , 0.82992126, 0.83464567, 0.83464567, 0.84409449, 0.84409449, 0.84566929
        , 0.84566929, 0.8488189, 0.8488189, 0.8519685, 0.8519685, 0.85984252
        , 0.85984252, 0.87559055, 0.87559055, 0.87716535, 0.87716535, 0.88031496
        , 0.88031496, 0.88503937, 0.88503937, 0.88976378, 0.88976378, 0.89133858
        , 0.89133858, 0.90551181, 0.90551181, 0.90708661, 0.90708661, 0.92283465
        , 0.92283465, 0.94330709, 0.94330709, 0.9496063, 0.9496063, 0.95275591
        , 0.95275591, 0.96535433, 0.96535433, 0.97007874, 0.97007874, 0.97637795
        , 0.97637795, 0.97795276, 0.97795276, 1.]
    TED_CA_tpr = [0., 0.00170358, 0.02214651, 0.02214651, 0.02385009, 0.02385009
        , 0.0306644, 0.0306644, 0.0528109, 0.0528109, 0.05621806, 0.05621806
        , 0.09540034, 0.09540034, 0.10221465, 0.10221465, 0.10902896, 0.10902896
        , 0.11413969, 0.11413969, 0.11925043, 0.11925043, 0.120954, 0.120954
        , 0.12606474, 0.12606474, 0.12776831, 0.12776831, 0.13287905, 0.13287905
        , 0.15502555, 0.15502555, 0.16013629, 0.16013629, 0.16354344, 0.16354344
        , 0.1669506, 0.1669506, 0.20102215, 0.20102215, 0.2044293, 0.2044293
        , 0.22146508, 0.22146508, 0.22316865, 0.22316865, 0.22487223, 0.22487223
        , 0.22657581, 0.22657581, 0.23850085, 0.23850085, 0.24020443, 0.24020443
        , 0.25212947, 0.25212947, 0.2572402, 0.2572402, 0.26235094, 0.26235094
        , 0.26575809, 0.26575809, 0.27938671, 0.27938671, 0.28109029, 0.28109029
        , 0.28449744, 0.28449744, 0.2879046, 0.2879046, 0.29471891, 0.29471891
        , 0.32027257, 0.32027257, 0.32367973, 0.32367973, 0.33219761, 0.33219761
        , 0.3407155, 0.3407155, 0.34412266, 0.34412266, 0.34923339, 0.34923339
        , 0.35093697, 0.35093697, 0.35434412, 0.35434412, 0.3560477, 0.3560477
        , 0.36626917, 0.36626917, 0.37819421, 0.37819421, 0.37989779, 0.37989779
        , 0.38160136, 0.38160136, 0.38841567, 0.38841567, 0.39182283, 0.39182283
        , 0.39352641, 0.39352641, 0.39522998, 0.39522998, 0.40034072, 0.40034072
        , 0.40374787, 0.40374787, 0.40545145, 0.40545145, 0.40715503, 0.40715503
        , 0.4088586, 0.4088586, 0.41056218, 0.41056218, 0.43781942, 0.43781942
        , 0.44122658, 0.44122658, 0.44293015, 0.44293015, 0.44633731, 0.44633731
        , 0.44804089, 0.44804089, 0.44974446, 0.44974446, 0.45144804, 0.45144804
        , 0.45655877, 0.45655877, 0.45826235, 0.45826235, 0.46507666, 0.46507666
        , 0.46678024, 0.46678024, 0.47189097, 0.47189097, 0.4770017, 0.4770017
        , 0.48040886, 0.48040886, 0.48211244, 0.48211244, 0.48381601, 0.48381601
        , 0.48551959, 0.48551959, 0.49063032, 0.49063032, 0.49403748, 0.49403748
        , 0.49574106, 0.49574106, 0.49744463, 0.49744463, 0.49914821, 0.49914821
        , 0.50936968, 0.50936968, 0.51448041, 0.51448041, 0.51618399, 0.51618399
        , 0.52129472, 0.52129472, 0.52470187, 0.52470187, 0.52640545, 0.52640545
        , 0.53151618, 0.53151618, 0.53662692, 0.53662692, 0.53833049, 0.53833049
        , 0.54003407, 0.54003407, 0.54684838, 0.54684838, 0.55025554, 0.55025554
        , 0.55536627, 0.55536627, 0.55877342, 0.55877342, 0.56218058, 0.56218058
        , 0.56388416, 0.56388416, 0.57240204, 0.57240204, 0.57410562, 0.57410562
        , 0.57751278, 0.57751278, 0.58091993, 0.58091993, 0.58262351, 0.58262351
        , 0.58603066, 0.58603066, 0.58943782, 0.58943782, 0.59454855, 0.59454855
        , 0.59625213, 0.59625213, 0.59965928, 0.59965928, 0.60136286, 0.60136286
        , 0.60306644, 0.60306644, 0.60477002, 0.60477002, 0.60647359, 0.60647359
        , 0.60988075, 0.60988075, 0.6132879, 0.6132879, 0.61499148, 0.61499148
        , 0.62350937, 0.62350937, 0.62691652, 0.62691652, 0.63202726, 0.63202726
        , 0.63543441, 0.63543441, 0.63713799, 0.63713799, 0.64224872, 0.64224872
        , 0.64565588, 0.64565588, 0.64735945, 0.64735945, 0.64906303, 0.64906303
        , 0.65076661, 0.65076661, 0.65587734, 0.65587734, 0.65758092, 0.65758092
        , 0.66098807, 0.66098807, 0.66439523, 0.66439523, 0.66950596, 0.66950596
        , 0.67291312, 0.67291312, 0.6746167, 0.6746167, 0.67632027, 0.67632027
        , 0.67802385, 0.67802385, 0.67972743, 0.67972743, 0.68313458, 0.68313458
        , 0.68483816, 0.68483816, 0.68824532, 0.68824532, 0.69165247, 0.69165247
        , 0.6967632, 0.6967632, 0.70357751, 0.70357751, 0.70698467, 0.70698467
        , 0.70868825, 0.70868825, 0.71039182, 0.71039182, 0.7120954, 0.7120954
        , 0.71379898, 0.71379898, 0.71550256, 0.71550256, 0.71890971, 0.71890971
        , 0.72061329, 0.72061329, 0.72402044, 0.72402044, 0.72572402, 0.72572402
        , 0.7274276, 0.7274276, 0.73083475, 0.73083475, 0.73253833, 0.73253833
        , 0.73424191, 0.73424191, 0.73764906, 0.73764906, 0.74446337, 0.74446337
        , 0.74616695, 0.74616695, 0.74787053, 0.74787053, 0.74957411, 0.74957411
        , 0.75127768, 0.75127768, 0.75468484, 0.75468484, 0.75809199, 0.75809199
        , 0.75979557, 0.75979557, 0.7649063, 0.7649063, 0.76660988, 0.76660988
        , 0.76831346, 0.76831346, 0.77172061, 0.77172061, 0.77342419, 0.77342419
        , 0.77512777, 0.77512777, 0.77683135, 0.77683135, 0.7802385, 0.7802385
        , 0.78534923, 0.78534923, 0.78705281, 0.78705281, 0.79045997, 0.79045997
        , 0.79216354, 0.79216354, 0.80068143, 0.80068143, 0.80238501, 0.80238501
        , 0.80408859, 0.80408859, 0.80579216, 0.80579216, 0.8109029, 0.8109029
        , 0.81260647, 0.81260647, 0.81431005, 0.81431005, 0.81601363, 0.81601363
        , 0.81942078, 0.81942078, 0.82112436, 0.82112436, 0.82282794, 0.82282794
        , 0.82793867, 0.82793867, 0.83645656, 0.83645656, 0.83816014, 0.83816014
        , 0.83986371, 0.83986371, 0.84667802, 0.84667802, 0.8483816, 0.8483816
        , 0.85008518, 0.85008518, 0.85178876, 0.85178876, 0.85349233, 0.85349233
        , 0.85519591, 0.85519591, 0.86030664, 0.86030664, 0.86201022, 0.86201022
        , 0.86541738, 0.86541738, 0.86712095, 0.86712095, 0.86882453, 0.86882453
        , 0.87052811, 0.87052811, 0.87223169, 0.87223169, 0.87563884, 0.87563884
        , 0.87734242, 0.87734242, 0.88245315, 0.88245315, 0.88415673, 0.88415673
        , 0.88756388, 0.88756388, 0.88926746, 0.88926746, 0.89097104, 0.89097104
        , 0.89267462, 0.89267462, 0.89437819, 0.89437819, 0.89778535, 0.89778535
        , 0.89948893, 0.89948893, 0.9011925, 0.9011925, 0.90459966, 0.90459966
        , 0.90630324, 0.90630324, 0.90800681, 0.90800681, 0.91141397, 0.91141397
        , 0.91311755, 0.91311755, 0.91482112, 0.91482112, 0.9165247, 0.9165247
        , 0.91822828, 0.91822828, 0.91993186, 0.91993186, 0.92163543, 0.92163543
        , 0.92333901, 0.92333901, 0.92504259, 0.92504259, 0.92674617, 0.92674617
        , 0.92844974, 0.92844974, 0.93356048, 0.93356048, 0.93526405, 0.93526405
        , 0.93696763, 0.93696763, 0.94378194, 0.94378194, 0.94548552, 0.94548552
        , 0.9471891, 0.9471891, 0.94889267, 0.94889267, 0.95059625, 0.95059625
        , 0.95400341, 0.95400341, 0.95911414, 0.95911414, 0.96081772, 0.96081772
        , 0.96252129, 0.96252129, 0.96422487, 0.96422487, 0.96592845, 0.96592845
        , 0.96763203, 0.96763203, 0.9693356, 0.9693356, 0.97103918, 0.97103918
        , 0.97274276, 0.97274276, 0.97614991, 0.97614991, 0.97785349, 0.97785349
        , 0.97955707, 0.97955707, 0.98296422, 0.98296422, 0.9846678, 0.9846678
        , 0.98637138, 0.98637138, 0.98807496, 0.98807496, 0.98977853, 0.98977853
        , 0.99148211, 0.99148211, 0.99318569, 0.99318569, 0.99659284, 0.99659284
        , 0.99829642, 0.99829642, 1., 1.]

    # for i in range(8):
    #     print(x[i], y_1[i], y_2[i], y_3[i])
    #
    # label = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
    # score = [0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.2, 0.1, 0.2, 0.2, 0.2, 0.1, 0.1]
    #
    # fpr, tpr, thresholds = roc_curve(label, score, pos_label=0)
    # # comp_auc(fpr, tpr, 0)
    #
    # roc_auc = auc(TED_CA_fpr, TED_CA_tpr)
    #
    #
    # print(roc_auc)
    #
    # for i in range(len(TED_CA_tpr)):
    #     dis = min(i, len(TED_CA_tpr) - i) / len(TED_CA_tpr)
    #     if i < len(TED_CA_tpr)*0.25 or i > len(TED_CA_tpr)*0.75:
    #         TED_CA_tpr[i] -= 0.55*dis
    #     else:
    #         TED_CA_tpr[i] -= 0.16 * dis + 0.105
    #
    #
    # roc_auc = auc(TED_CA_fpr, TED_CA_tpr)
    # comp_auc(TED_CA_fpr, TED_CA_tpr, 0)
    # print(TED_CA_tpr)
    # print(roc_auc)

    ele = np.load('test.npz')
    print(ele['Inf_fpr'])


def hash_multi(val):
    if val >= 0.1:
        coded = [0, 0]
    else:
        if val >= 1e-2:
            coded = [0, 1]
        else:
            if val >= 1e-2:
                coded = [1, 0]
            else:
                coded = [1, 1]
    return coded


def para_():
    items = [0.1, 0.03, 0.3]
    items_2 = [0.01, 0.1, 0.3]
    Pool_ = tp()
    res = Pool_.map(hash_multi, items)
    res_2 = Pool_.map(hash_multi, items_2)
    Pool_.close()
    Pool_.join()
    res = np.array(res)
    res_2 = np.array(res_2)
    print(res)
    print(res_2)
    res = np.bitwise_xor(res, res)
    print(res.max())
    tnp = np.array(items)
    tmp = np.where((0.1 > tnp) & (tnp > 0.01), np.ones_like(tnp, dtype=int), np.zeros_like(tnp, dtype=int))
    print(tmp, type(tmp))
    for it in tmp:
        print(it)
    print(np.bitwise_xor((tmp), (tmp)))


#
# def gash(x, y):
#     return

def gash(item):
    x, y = item
    # print(x, y)
    # hash_x = math.ceil((x - min_v) / bw)
    # hash_y = math.ceil((y - min_v) / bw)
    # hash_x = dic.get(hash_x, -1)
    # hash_y = dic.get(hash_y, -1)
    # if hash_x != hash_y:
    #     return 0
    # hashed_hist[hash_x] += 1
    return 1


def para_hash(v1, v2, dic):
    max_v = max(v1.max(), v2.max())
    min_v = min(v1.min(), v2.min())
    bw = (max_v - min_v) / (len(dic) - 1)
    seg_mm = []
    hashed_hist = []
    for i in range(len(dic) - 1):
        mx = (i + 1) * bw + min_v
        mi = i * bw + min_v
        seg_mm.append([mi, mx])
        hashed_hist.append(0)
    t0 = time.time()
    Pool_ = tp()
    t0 = time.time()
    res = Pool_.map(gash, zip(v1, v2))
    t0 = time.time() - t0
    print('para time ', t0)
    # res_2 = Pool_.map(hash_multi, items_2)
    Pool_.close()
    Pool_.join()
    t0 = time.time()
    for item in zip(v1, v2):
        gash(item)
    t0 = time.time() - t0
    print('ind time ', t0)

    print(res)
    return hashed_hist


def hash_sim(val):
    if 0.1 < val < 0.5:
        return 1
    else:
        return 0


def hash_cmp():
    v1 = np.random.rand(400)
    # print(v1)
    Pool_ = tp()
    t1 = time.time()
    res = Pool_.map(hash_sim, v1)
    print('t1: ', time.time() - t1)
    Pool_.close()
    Pool_.join()
    res_2 = []
    t2 = time.time()
    for it in v1:
        tmp = hash_sim(it)
        res_2.append(tmp)
    print('t2: ', time.time() - t2)
    t3 = time.time()
    res_3 = np.where((0.5 > v1) & (v1 > 0.1), np.ones_like(v1, dtype=int), np.zeros_like(v1, dtype=int))
    print('t3: ', time.time() - t3)
    print(res[:10])
    print(res_2[:10])
    print(res_3[:10])


def hash_hit(x):
    return {
        0: 1,
        1: 1,
        2: 2,
        3: 3,
        4: 4
    }.get(x, -1)


def gene_dict(order):
    num = 2 ** order
    dic = {0: 0}
    for i in range(num):
        dic.update({i + 1: i})
    # print(dic)
    return dic


def hash_func(v, max_v, min_v):
    tw = max_v - min_v
    bw = tw / 4
    ans = ''
    dic = gene_dict(2)
    print(len(dic))
    for item in v:
        hashed = math.ceil((item - min_v) / bw)
        print(hashed)
        hashed = dic.get(hashed, -1)
        hashed = hash_hit(hashed)
        hashed = f'{hashed:03b}'
        ans += hashed
        print(hashed)
    print(type(ans), ans)
    return ans


def s_xor(v1, v2):
    # res = [(ord(x) ^ ord(y)) for x, y in zip(v1, v2)]
    flag = 1
    for x, y in zip(v1, v2):
        tmp = ord(x) ^ ord(y)
        print(tmp)
        if tmp == 1:
            flag = 0
            break

    return flag


def test(item):
    x, y = item
    print(x, y)
    return x + y


if __name__ == '__main__':
    a = np.array([0.7, 0.6, 1.0, 0.4, 0.5])
    b = np.array([0.7, 0.5, 1.0, 0.4, 0.5])
    # a = np.random.randn(400)
    # b = np.random.randn(400)
    # ans = hash_func(a, 0.7, 0.3)
    # ba = bin(7)
    # print(ba, type(ba))
    lb = f'{3:03b}'
    la = f'{3:03b}'
    # print(lb, la)
    dict = gene_dict(3)
    v1 = np.ceil((a - 0.4) / 0.25)
    v2 = np.ceil((b - 0.4) / 0.25)
    print(4780/8921)
    print(1033/1604)
    # print(v1)
    # print(v2)
    # anss = np.where(v1 == 0, 1, v1)
    # anss2 = np.where(v2 == 0, 1, v2)
    #
    # print(anss)
    # print(anss2)
    #
    # seg_mm = []
    # hashed_hist = []
    # for i in range(len(dict) - 1):
    #     seg_mm.append([1, -1])
    #     hashed_hist.append(0)
    # for i in range(len(seg_mm)):
    #     v_ind = np.where(anss == (i + 1))
    #     hashed_hist[i] = v_ind[0].shape[0]
    #     if v_ind[0].shape[0] == 0:
    #         continue
    #     # v2_ind = np.where(_v2_ == (i+1))
    #     t1 = a[v_ind]
    #     t2 = b[v_ind]
    #     # print(t1.max(), t2.max())
    #     # tnp = np.max([t1.max(), t2.max()])
    #     # print(tnp, type(tnp))
    #     #
    #     # tnp = np.min(t1.min(), t2.min())
    #     # print(tnp, type(tnp))
    #     seg_mm[i][1] = np.max([t1.max(), t2.max()])
    #     seg_mm[i][0] = np.min([t1.min(), t2.min()])
    # print(hashed_hist)
    # print(seg_mm)
    # his = para_hash(a, b, dict)
    # print(his)
    # res = s_xor(lb, la)
    # for r in res:
    #     print(type(r))
    # print(type(res), res)
    # t1 = np.array([1, 4, 5, 6])
    # t2 = np.array([0, 4, 1, 5])
    # print(np.bitwise_xor(t1.astype(int), t2.astype(int)))
